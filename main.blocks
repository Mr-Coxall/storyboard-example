<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="let menuSelection = 0" numlines="1" declaredvars="menuSelection"></mutation><next><block type="typescript_statement" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="storyboard.registerScene(&quot;title&quot;, function () {" line1="    const title = sprites.create(img`.`)" line2="    title.say(&quot;TITLE SCREEN&quot;)" line3="" line4="    const subtitle = sprites.create(img`.`)" line5="    subtitle.y = 80;" line6="    subtitle.say(&quot;press A&quot;)" line7="" line8="    // Any events that are registered in a scene will not run when another" line9="    // scene is active. The &quot;menu&quot; scene also registers an event handler" line10="    // for button A below" line11="    controller.A.onEvent(ControllerButtonEvent.Pressed, function () {" line12="        // replace() destroys the current scene and creates a new one in" line13="        // its place" line14="        storyboard.replace(&quot;menu&quot;)" line15="    });" line16="})" numlines="17"></mutation><next><block type="typescript_statement" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="storyboard.registerScene(&quot;menu&quot;, function () {" line1="    // Create two dummy menu options" line2="    const option1 = sprites.create(image.create(50, 10))" line3="    option1.image.fill(1);" line4="    option1.image.print(&quot;OPTION 1&quot;, 2, 2, 15);" line5="    option1.top = 20;" line6="" line7="    const option2 = sprites.create(image.create(50, 10))" line8="    option2.image.fill(1);" line9="    option2.image.print(&quot;OPTION 2&quot;, 2, 2, 15);" line10="    option2.top = 32;" line11="" line12="    // This cursor will indicate which menu item is selected" line13="    const cursor = sprites.create(img`" line14="        4 . . ." line15="        . 4 . ." line16="        . . 4 ." line17="        . . . 4" line18="        . . 4 ." line19="        . 4 . ." line20="        4 . . ." line21="    `)" line22="    cursor.right = option1.left - 2;" line23="    cursor.y = option1.y;" line24="    " line25="    // This function mutates the menu state declared at the top" line26="    // of the file" line27="    function updateCursorPosition() {" line28="        menuSelection = (menuSelection + 1) % 2" line29="        if (menuSelection === 0) {" line30="            cursor.y = option1.y;" line31="        }" line32="        else {" line33="            cursor.y = option2.y;" line34="        }" line35="    }" line36="" line37="    controller.up.onEvent(ControllerButtonEvent.Pressed, updateCursorPosition)" line38="    controller.down.onEvent(ControllerButtonEvent.Pressed, updateCursorPosition)" line39="" line40="    controller.A.onEvent(ControllerButtonEvent.Pressed, function () {" line41="        // Here I use push() instead of replace(). This will keep the scene in" line42="        // the background, but not run any of the code in registerScene()." line43="        // In the next scene, I use pop() to return to this scene" line44="        storyboard.push(&quot;game&quot;)" line45="    })" line46="})" numlines="47"></mutation><next><block type="typescript_statement" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="storyboard.registerScene(&quot;game&quot;, function () {" line1="    const title2 = sprites.create(img`.`)" line2="" line3="    if (menuSelection === 0) {" line4="        title2.say(&quot;YOU CHOSE 1&quot;)" line5="    }" line6="    else {" line7="        title2.say(&quot;YOU CHOSE 2&quot;)" line8="    }" line9="" line10="    const subtitle2 = sprites.create(img`.`)" line11="    subtitle2.y = 80;" line12="    subtitle2.say(&quot;B TO GO BACK&quot;)" line13="" line14="    controller.B.onEvent(ControllerButtonEvent.Pressed, function () {" line15="        // This returns us to the &quot;menu&quot; scene" line16="        storyboard.pop();" line17="    })" line18="})" numlines="19"></mutation><next><block type="storyboardstart"><comment id="undefined" pinned="false" h="80" w="160">Start the initial scene</comment><value name="name"><shadow type="text"><field name="TEXT">title</field></shadow></value></block></next></block></next></block></next></block></next></block></statement></block><block type="storyboardregister" disabled="true" x="510" y="990"><field name="boot">storyboard.loaderBootSequence</field></block></xml>